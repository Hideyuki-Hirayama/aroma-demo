{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMgYDB4aZtA5x+G8PaGUFB6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"USxLxMIuoiTX"},"outputs":[],"source":["# -*- coding: utf-8 -*-\n","from typing import Dict, List, Tuple\n","from data import SCORE_TABLE, OIL_TO_CATEGORIES\n","\n","def exclude_by_disliked_categories(oil: str, disliked_categories: List[str]) -> bool:\n","    \"\"\"嫌いな香り系統に該当するか判定（該当すればTrue=除外）\"\"\"\n","    cats = OIL_TO_CATEGORIES.get(oil, set())\n","    return any(cat in cats for cat in disliked_categories)\n","\n","def pick_blend(symptom: str, disliked_categories: List[str], diff_threshold: int = 2):\n","    \"\"\"\n","    単一の症状に対して、嫌いな香り系統で除外後、上位2種と滴数を返す。\n","    返り値: dict {ranking: [(oil, score), ...], blend: [(oil, drops), ...], rule: str, note?: str}\n","    \"\"\"\n","    # 1) 症状のスコア行を取得\n","    row: Dict[str, int] = SCORE_TABLE.get(symptom, {})\n","    if not row:\n","        return {\"error\": f\"未知の症状です: {symptom}\"}\n","\n","    # 2) 除外を適用\n","    scored: List[Tuple[str, int]] = []\n","    for oil, sc in row.items():\n","        if not exclude_by_disliked_categories(oil, disliked_categories):\n","            scored.append((oil, sc))\n","\n","    # 3) ランキング（スコア降順、同点は油名の五十音順）\n","    ranked = sorted(scored, key=lambda x: (-x[1], x[0]))\n","\n","    result = {\n","        \"ranking\": ranked,\n","        \"blend\": [],\n","        \"rule\": f\"差>={diff_threshold} なら 3滴/1滴、差<{diff_threshold} なら 2滴/2滴（合計4滴）\"\n","    }\n","\n","    # 4) ケース分け\n","    if len(ranked) == 0:\n","        result[\"error\"] = \"該当精油がありません（嫌いな香りの系統の見直しをご検討ください）\"\n","        return result\n","\n","    if len(ranked) == 1:\n","        oil1, _ = ranked[0]\n","        result[\"blend\"] = [(oil1, 4)]\n","        result[\"note\"] = \"1種類のみのため単独4滴としました。\"\n","        return result\n","\n","    # 2種以上\n","    (o1, s1), (o2, s2) = ranked[0], ranked[1]\n","    if (s1 - s2) >= diff_threshold:\n","        drops = (3, 1)\n","    else:\n","        drops = (2, 2)\n","    result[\"blend\"] = [(o1, drops[0]), (o2, drops[1])]\n","    return result\n"]}]}